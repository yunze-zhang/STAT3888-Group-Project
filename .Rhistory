### column missingness
column_missingness = c()
for (i in 1:ncol(tech_biom1)) {
num_missing = colSums(is.na(tech_biom1[i]))
variable = colnames(tech_biom1)[i]
observations = nrow(tech_biom1)
missingness_proportion = round(num_missing / observations, 3)
column_missingness = c(column_missingness, variable, num_missing, observations, missingness_proportion)
}
library(tidyverse)
library(skimr)
kable(head(col_df))
install.packages('skimr')
install.packages('kable')
library(tidyverse)
library(skimr)
library(visdat)
library(GGally)
library(knitr)
load("tech_data.Rdata")
tech_biom1 = tech_biom[1:54] #remove XXX_MISS variables
vis_miss(tech_biom1)
### column missingness
column_missingness = c()
for (i in 1:ncol(tech_biom1)) {
num_missing = colSums(is.na(tech_biom1[i]))
variable = colnames(tech_biom1)[i]
observations = nrow(tech_biom1)
missingness_proportion = round(num_missing / observations, 3)
column_missingness = c(column_missingness, variable, num_missing, observations, missingness_proportion)
}
col_df = matrix(column_missingness, ncol=4, byrow=TRUE)
colnames(col_df) = c("Variable", "Missingness Count", "Total", "Missingness Proportion")
col_df = data.frame(col_df)
good_variables = col_df$Variable[col_df$Missingness.Proportion < 0.3]
col_df2 = col_df[col_df$Variable %in% good_variables,] # table of all "good" columns
tech_biom2 = tech_biom1[good_variables] # filtering for good columns only, arbitrary 30% column missingness threshold
### row missingness
tech_biom3 = tech_biom2[rowSums(is.na(tech_biom2)) == 0,] # filtering for good rows only, removing all rows with N/A
vis_miss(tech_biom3)
save(tech_biom3, file="cleaned_biom.Rdata")
nutr = read.csv("data/AHS11Nutrient.csv")
head(nutr)
vis_miss(nutr
vis_miss(nutr)
vis_miss(nutr, warn_large_data = FALSE)
combined_data = merge(tech_biom3, nutr)
head(combined_data)
save(combined_data, file="combined_data.Rdata")
library(tidyverse)
library(skimr)
library(visdat)
library(GGally)
library(knitr)
library(corrplot)
library(glmnet)
library(brglm)
load("combined_data.Rdata")
class(combined_data)
DT::datatable(combined_data)
systol_data=combined_data[ , !(names(combined_data) %in% c("ABSPID", "ABSHID", "BMISC", "HCHOLBC", "CHOLRESB", "CHOLNTR", "HDLCHREB", "LDLNTR", "LDLRESB", "DIASTOL", "HSUGBC", "BMR", "EIBMR1", "EIBMR2"))]
# How/why did you choose to omit these particular variables?
# These are our response variables - those we decided we would use to predict cardiovascular health with. If I don't remove them, they'd become predictor variables in the linear models I use later on.
class(systol_data)
DT::datatable(systol_data)
M = cor(systol_data)
corrplot(M, method = 'color', order = 'alphabet')
systol_M0 = lm(SYSTOL ~ 1, data = systol_data)
systol_M1 = lm(SYSTOL ~ ., data = systol_data)
systol_forw <- step(systol_M0, scope = list(lower = systol_M0, upper = systol_M1), direction = "forward", k = 2, trace = 0)
summary(systol_forw)
y = systol_data$SYSTOL
x = combined_data[ , !(names(combined_data) %in% c("ABSPID", "ABSHID", "BMISC", "SYSTOL", "HCHOLBC", "CHOLRESB", "CHOLNTR", "HDLCHREB", "LDLNTR", "LDLRESB", "DIASTOL", "HSUGBC", "BMR", "EIBMR1", "EIBMR2"))]
# Once again where do these variables come from? (I haven't done any lectures yet, is this concept from it?)
model <- glmnet(x, y, alpha = 0) # purpose of this variable? (We aren't using it anywhere)
# Alpha determines if we want LASSO or RIDGE regression. I think I tested ridge regression here.
print(model)
best_model <- glmnet(x, y, alpha = 0, lambda = best_lambda) # How do we find this best_lambda?
y = systol_data$SYSTOL
x = combined_data[ , !(names(combined_data) %in% c("ABSPID", "ABSHID", "BMISC", "SYSTOL", "HCHOLBC", "CHOLRESB", "CHOLNTR", "HDLCHREB", "LDLNTR", "LDLRESB", "DIASTOL", "HSUGBC", "BMR", "EIBMR1", "EIBMR2"))]
# Once again where do these variables come from? (I haven't done any lectures yet, is this concept from it?)
model <- glmnet(x, y, alpha = 0) # purpose of this variable? (We aren't using it anywhere)
# Alpha determines if we want LASSO or RIDGE regression. I think I tested ridge regression here.
best_lambda = model$lambda.min
best_model <- glmnet(x, y, alpha = 0, lambda = best_lambda) # How do we find this best_lambda?
# Oops, must have accidentally deleted the line.
summary(best_model)
summary(y)
library(tidyverse)
library(skimr)
library(visdat)
library(GGally)
library(knitr)
library(corrplot)
library(glmnet)
library(brglm)
load("combined_data.Rdata")
systol_data=combined_data[ , !(names(combined_data) %in% c("ABSPID", "ABSHID", "BMISC", "HCHOLBC", "CHOLRESB", "CHOLNTR", "HDLCHREB", "LDLNTR", "LDLRESB", "DIASTOL", "HSUGBC", "BMR", "EIBMR1", "EIBMR2"))]
# How/why did you choose to omit these particular variables?
# These are our response variables - those we decided we would use to predict cardiovascular health with. If I don't remove them, they'd become predictor variables in the linear models I use later on.
class(systol_data)
DT::datatable(systol_data)
library(tidyverse)
library(skimr)
library(visdat)
library(GGally)
library(knitr)
library(corrplot)
library(glmnet)
library(brglm)
combined_data = read.csv('combined_data.csv')
class(combined_data)
DT::datatable(combined_data)
library(tidyverse)
library(skimr)
library(visdat)
library(GGally)
library(knitr)
library(corrplot)
library(glmnet)
library(brglm)
combined_data = read.csv('PC_combined_data.csv')
class(combined_data)
DT::datatable(combined_data)
systol_data=combined_data[ , !(names(combined_data) %in% c("ABSPID", "ABSHID", "BMISC", "HCHOLBC", "CHOLRESB", "CHOLNTR", "HDLCHREB", "LDLNTR", "LDLRESB", "DIASTOL", "HSUGBC", "BMR", "EIBMR1", "EIBMR2"))]
# How/why did you choose to omit these particular variables?
# These are our response variables - those we decided we would use to predict cardiovascular health with. If I don't remove them, they'd become predictor variables in the linear models I use later on.
class(systol_data)
DT::datatable(systol_data)
systol_M0 = lm(SYSTOL ~ 1, data = systol_data)
systol_M1 = lm(SYSTOL ~ ., data = systol_data)
systol_forw <- step(systol_M0, scope = list(lower = systol_M0, upper = systol_M1), direction = "forward", k = 2, trace = 0)
summary(systol_forw)
plot_summs(fit)
install.packages('jtools')
library(tidyverse)
library(skimr)
library(visdat)
library(GGally)
library(knitr)
library(corrplot)
library(glmnet)
library(brglm)
library(jtools)
systol_forw <- step(systol_M0, scope = list(lower = systol_M0, upper = systol_M1), direction = "forward", k = 2, trace = 0)
summary(systol_forw)
plot_summs(fit)
plot_summs(systol_forw)
install.packages('ggstance')
systol_forw <- step(systol_M0, scope = list(lower = systol_M0, upper = systol_M1), direction = "forward", k = 2, trace = 0)
summary(systol_forw)
plot_summs(systol_forw)
plot_summs(systol_forw, scale = TRUE)
plot_summs(systol_forw)
bmi_M0 = lm(SYSTOL ~ 1, data = systol_data)
bmi_M1 = lm(SYSTOL ~ ., data = systol_data)
bmi_forw <- step(bmi_M0, scope = list(lower = bmi_M0, upper = bmi_M1), direction = "forward", k = 2, trace = 0)
summary(bmi_forw)
bmi_data=combined_data[ , !(names(combined_data) %in% c("ABSPID", "ABSHID", "SYSTOL", "HCHOLBC", "CHOLRESB", "CHOLNTR", "HDLCHREB", "LDLNTR", "LDLRESB", "DIASTOL", "HSUGBC", "BMR", "EIBMR1", "EIBMR2"))]
bmi_M0 = lm(BMI ~ 1, data = bmi_data)
bmi_M0 = lm(BMISC ~ 1, data = bmi_data)
bmi_M1 = lm(BMISC ~ ., data = bmi_data)
bmi_forw <- step(bmi_M0, scope = list(lower = bmi_M0, upper = bmi_M1), direction = "forward", k = 2, trace = 0)
summary(bmi_forw)
plot_summs(bmi_forw, sort)
plot_summs(bmi_forw, sort)
plot_summs(systol_forw)
plot_summs(bmi_forw)
plot_summs(bmi_forw) + ggtitle("S")
plot_summs(bmi_forw) + ggtitle("S") + theme_gray(base_size = 14)
plot_summs(bmi_forw) + ggtitle("S") + theme_minimal(base_size = 14)
plot_summs(bmi_forw) + ggtitle("S") + theme_gray(base_size = 14)
plot_summs(bmi_forw) + ggtitle("S") + theme_gray(base_size = 20)
plot_summs(bmi_forw) + ggtitle("S") + theme_gray(base_size = 5)
plot_summs(bmi_forw) + ggtitle("S") + theme_gray(base_size = 8)
plot_summs(bmi_forw) + ggtitle("Coefficient Estimates of OLS Model for Systolic Blood Pressure") + theme_gray(base_size = 8)
plot_summs(bmi_forw) + ggtitle("Coefficient Estimates of OLS Model for BMI") + theme_gray(base_size = 8)
plot_summs(systol_forw)
plot_summs(systol_forw) + ggtitle("Coefficient Estimates of OLS Model for BMI") + theme_gray(base_size = 8)
plot_summs(systol_forw) + ggtitle("Coefficient Estimates of OLS Model for Systolic Blood Pressure") + theme_gray(base_size = 8)
systol_forw <- step(systol_M0, scope = list(lower = systol_M0, upper = systol_M1), direction = "forward", k = 2, trace = 0)
kable(summary(systol_forw))
systol_forw <- step(systol_M0, scope = list(lower = systol_M0, upper = systol_M1), direction = "forward", k = 2, trace = 0)
summary(systol_forw)
install.packages('sjPlot')
install.packages('sjmisc')
install.packages('sjlabelled')
library(tidyverse)
library(skimr)
library(visdat)
library(GGally)
library(knitr)
library(corrplot)
library(glmnet)
library(brglm)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
systol_forw <- step(systol_M0, scope = list(lower = systol_M0, upper = systol_M1), direction = "forward", k = 2, trace = 0)
tab_model(systol_forw)
plot_summs(systol_forw) + ggtitle("Coefficient Estimates of OLS Model for Systolic Blood Pressure") + ylab("Predictor Variable") + xlab("Coefficient Estimate") + theme_gray(base_size = 8)
plot_summs(systol_forw) + ggtitle("Coefficient Estimates of OLS Model for Systolic Blood Pressure") + ylab("Predictor Variable") + xlab("Coefficient Estimate") + theme_dark(base_size = 8)
plot_summs(systol_forw) + ggtitle("Coefficient Estimates of OLS Model for Systolic Blood Pressure") + ylab("Predictor Variable") + xlab("Coefficient Estimate") + theme_classic(base_size = 8)
plot_summs(systol_forw) + ggtitle("Coefficient Estimates of OLS Model for Systolic Blood Pressure") + ylab("Predictor Variable") + xlab("Coefficient Estimate") + theme_grey(base_size = 8)
plot_summs(systol_forw) + ggtitle("Coefficient Estimates of OLS Model for Systolic Blood Pressure") + ylab("Predictor Variable") + xlab("Coefficient Estimate") + theme_gray(base_size = 8)
plot_summs(systol_forw) + ggtitle("Coefficient Estimates of OLS Model for Systolic Blood Pressure") + ylab("Predictor Variable") + xlab("Coefficient Estimate") + theme_gray(base_size = 10)
plot_summs(systol_forw) + ggtitle("Coefficient Estimates of OLS Model for Systolic Blood Pressure") + ylab("Predictor Variable") + xlab("Coefficient Estimate") + theme_gray(base_size = 10)
plot_summs(bmi_forw) + ggtitle("Coefficient Estimates of OLS Model for BMI") + theme_gray(base_size = 10)
bmi_forw <- step(bmi_M0, scope = list(lower = bmi_M0, upper = bmi_M1), direction = "forward", k = 2, trace = 0)
tab_model(bmi_forw)
plot_summs(bmi_forw) + ggtitle("Coefficient Estimates of OLS Model for BMI") + ylab("Predictor Variable") + xlab("Coefficient Estimate") + theme_gray(base_size = 10)
systol_forw <- step(systol_M0, scope = list(lower = systol_M0, upper = systol_M1), direction = "forward", k = 2, trace = 0)
systol_table = tab_model(systol_forw)
systol_table
systol_table
print(systol_table)
systol_forw <- step(systol_M0, scope = list(lower = systol_M0, upper = systol_M1), direction = "forward", k = 2, trace = 0)
tab_model(systol_forw)
bmi_forw <- step(bmi_M0, scope = list(lower = bmi_M0, upper = bmi_M1), direction = "forward", k = 2, trace = 0)
tab_model(bmi_forw)
systol_forw <- step(systol_M0, scope = list(lower = systol_M0, upper = systol_M1), direction = "forward", k = 2, trace = 0)
tab_model(systol_forw)
plot(bmi_forw)
plot(systol_forw)
plot(systol_forw)
